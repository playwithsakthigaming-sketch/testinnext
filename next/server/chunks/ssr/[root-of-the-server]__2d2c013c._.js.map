{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/driver-hub/events/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport eventsData from '@/lib/events.json';\nimport { useRouter } from 'next/navigation';\n\ntype CalendarEvent = {\n    title: string;\n    start: Date;\n    allDay: boolean;\n    extendedProps: {\n        id: string;\n    };\n    backgroundColor: string;\n    borderColor: string;\n};\n\n// Helper to parse the date/time string from events.json\nconst parseDateTime = (dateTimeStr: string): Date | null => {\n    const parts = dateTimeStr.split(' | ');\n    if (parts.length < 2) return null; // Invalid format\n\n    const datePart = parts[0];\n    const timePart = parts[1];\n\n    const [day, month, year] = datePart.split('.').map(Number);\n    const [time, ] = timePart.split(' ');\n    const [hour, minute] = time.split(':').map(Number);\n    \n    // Month is 0-indexed in JS Date\n    return new Date(year, month - 1, day, hour, minute);\n};\n\n\nexport default function DriverHubEventsPage() {\n    const router = useRouter();\n\n    const formattedEvents: CalendarEvent[] = eventsData.events.map(event => {\n        const start = parseDateTime(event.meetupTime);\n        const isInternal = event.type === 'internal';\n\n        return {\n            title: event.title,\n            start: start || new Date(event.date),\n            allDay: false, // Assuming events are at specific times\n            extendedProps: { id: event.id },\n            backgroundColor: isInternal ? 'hsl(var(--primary))' : 'hsl(var(--secondary))',\n            borderColor: isInternal ? 'hsl(var(--primary))' : 'hsl(var(--secondary))',\n        };\n    }).filter(e => e.start !== null);\n\n    const handleEventClick = (clickInfo: any) => {\n        const eventId = clickInfo.event.extendedProps.id;\n        router.push(`/driver-hub/events/${eventId}`);\n    };\n\n    return (\n        <div className=\"p-4 md:p-8\">\n            <Card>\n                <CardContent className=\"p-4\">\n                     <FullCalendar\n                        plugins={[dayGridPlugin, timeGridPlugin]}\n                        initialView=\"dayGridMonth\"\n                        headerToolbar={{\n                            left: 'prev,next today',\n                            center: 'title',\n                            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n                        }}\n                        events={formattedEvents}\n                        eventClick={handleEventClick}\n                        height=\"auto\"\n                        contentHeight=\"auto\"\n                        aspectRatio={1.5}\n                        eventTimeFormat={{\n                            hour: 'numeric',\n                            minute: '2-digit',\n                            meridiem: 'short'\n                        }}\n                     />\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;AAqBA,wDAAwD;AACxD,MAAM,gBAAgB,CAAC;IACnB,MAAM,QAAQ,YAAY,KAAK,CAAC;IAChC,IAAI,MAAM,MAAM,GAAG,GAAG,OAAO,MAAM,iBAAiB;IAEpD,MAAM,WAAW,KAAK,CAAC,EAAE;IACzB,MAAM,WAAW,KAAK,CAAC,EAAE;IAEzB,MAAM,CAAC,KAAK,OAAO,KAAK,GAAG,SAAS,KAAK,CAAC,KAAK,GAAG,CAAC;IACnD,MAAM,CAAC,KAAO,GAAG,SAAS,KAAK,CAAC;IAChC,MAAM,CAAC,MAAM,OAAO,GAAG,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC;IAE3C,gCAAgC;IAChC,OAAO,IAAI,KAAK,MAAM,QAAQ,GAAG,KAAK,MAAM;AAChD;AAGe,SAAS;IACpB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,kBAAmC,4FAAA,CAAA,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QAC3D,MAAM,QAAQ,cAAc,MAAM,UAAU;QAC5C,MAAM,aAAa,MAAM,IAAI,KAAK;QAElC,OAAO;YACH,OAAO,MAAM,KAAK;YAClB,OAAO,SAAS,IAAI,KAAK,MAAM,IAAI;YACnC,QAAQ;YACR,eAAe;gBAAE,IAAI,MAAM,EAAE;YAAC;YAC9B,iBAAiB,aAAa,wBAAwB;YACtD,aAAa,aAAa,wBAAwB;QACtD;IACJ,GAAG,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK;IAE3B,MAAM,mBAAmB,CAAC;QACtB,MAAM,UAAU,UAAU,KAAK,CAAC,aAAa,CAAC,EAAE;QAChD,OAAO,IAAI,CAAC,CAAC,mBAAmB,EAAE,SAAS;IAC/C;IAEA,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC,gIAAA,CAAA,OAAI;sBACD,cAAA,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;0BAClB,cAAA,8OAAC,wJAAA,CAAA,UAAY;oBACV,SAAS;wBAAC,kJAAA,CAAA,UAAa;wBAAE,mJAAA,CAAA,UAAc;qBAAC;oBACxC,aAAY;oBACZ,eAAe;wBACX,MAAM;wBACN,QAAQ;wBACR,OAAO;oBACX;oBACA,QAAQ;oBACR,YAAY;oBACZ,QAAO;oBACP,eAAc;oBACd,aAAa;oBACb,iBAAiB;wBACb,MAAM;wBACN,QAAQ;wBACR,UAAU;oBACd;;;;;;;;;;;;;;;;;;;;;AAMxB","debugId":null}}]
}