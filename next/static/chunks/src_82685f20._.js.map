{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/events/create/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { EventsData, Event } from '@/lib/events';\n\nconst formSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  date: z.string().min(1, 'Date is required'),\n  imageId: z.string().min(1, 'Image ID is required'),\n  url: z.string().url('Must be a valid URL'),\n  type: z.enum(['internal', 'partner'], {\n    errorMap: () => ({ message: 'Please select an event type' }),\n  }),\n  attendees: z.coerce.number().min(0, 'Attendees must be a positive number'),\n  vtcs: z.coerce.number().min(0, 'VTCs must be a positive number'),\n  departure: z.string().min(1, 'Departure location is required'),\n  arrival: z.string().min(1, 'Arrival location is required'),\n  server: z.string().min(1, 'Server is required'),\n  meetupTime: z.string().min(1, 'Meetup time is required'),\n  departureTime: z.string().min(1, 'Departure time is required'),\n  description: z.string().min(1, 'Description is required'),\n  rules: z.string().min(1, 'Rules are required'),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { events: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function createEvent(values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    console.error(validation.error.flatten().fieldErrors);\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n\n    const newEvent: Event = {\n      id: `event-${Date.now()}`,\n      ...validation.data,\n    };\n    \n    eventsData.events.unshift(newEvent);\n\n    await writeJsonFile(eventsFilePath, eventsData);\n    \n    revalidatePath('/admin/events');\n    revalidatePath('/events');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error creating event:', error);\n    return { success: false, message: 'Failed to write to data file.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAgDsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/placeholder-images.ts"],"sourcesContent":["import data from './placeholder-images.json';\n\nexport type ImagePlaceholder = {\n  id: string;\n  description: string;\n  imageUrl: string;\n  imageHint: string;\n};\n\nexport const PlaceHolderImages: ImagePlaceholder[] = data.placeholderImages;\n"],"names":[],"mappings":";;;AAAA;;AASO,MAAM,oBAAwC,2GAAA,CAAA,UAAI,CAAC,iBAAiB","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/events/create/create-event-form.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { createEvent } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { PlaceHolderImages } from \"@/lib/placeholder-images\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst formSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  date: z.string().min(1, 'Date is required'),\n  imageId: z.string().min(1, 'An image ID is required'),\n  url: z.string().url('Must be a valid URL'),\n  type: z.enum(['internal', 'partner']),\n  attendees: z.coerce.number().min(0),\n  vtcs: z.coerce.number().min(0),\n  departure: z.string().min(1, 'Departure location is required'),\n  arrival: z.string().min(1, 'Arrival location is required'),\n  server: z.string().min(1, 'Server is required'),\n  meetupTime: z.string().min(1, 'Meetup time is required'),\n  departureTime: z.string().min(1, 'Departure time is required'),\n  description: z.string().min(1, 'Description is required'),\n  rules: z.string().min(1, 'Rules are required'),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst eventImageOptions = PlaceHolderImages.filter(img => img.id.startsWith('event-'));\n\nexport function CreateEventForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: \"\",\n      date: \"\",\n      imageId: \"\",\n      url: \"\",\n      type: \"internal\",\n      attendees: 0,\n      vtcs: 0,\n      departure: \"\",\n      arrival: \"\",\n      server: \"\",\n      meetupTime: \"\",\n      departureTime: \"\",\n      description: \"\",\n      rules: \"Follow all TruckersMP rules. No reckless driving. Keep a safe distance.\",\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await createEvent(values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully.\",\n      });\n      router.push(\"/admin/events\");\n      router.refresh(); \n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n            control={form.control}\n            name=\"title\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Event Title</FormLabel>\n                <FormControl>\n                    <Input placeholder=\"Enter event title\" {...field} />\n                </FormControl>\n                <FormMessage />\n                </FormItem>\n            )}\n            />\n            <FormField\n            control={form.control}\n            name=\"date\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Event Date</FormLabel>\n                <FormControl>\n                    <Input placeholder=\"e.g., DD.MM.YYYY | HH:MM UTC\" {...field} />\n                </FormControl>\n                <FormMessage />\n                </FormItem>\n            )}\n            />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n            control={form.control}\n            name=\"imageId\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Event Image</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                    <SelectTrigger>\n                        <SelectValue placeholder=\"Select an image\" />\n                    </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                    {eventImageOptions.map(image => (\n                        <SelectItem key={image.id} value={image.id}>{image.description}</SelectItem>\n                    ))}\n                    </SelectContent>\n                </Select>\n                <FormMessage />\n                </FormItem>\n            )}\n            />\n            <FormField\n            control={form.control}\n            name=\"url\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Event URL</FormLabel>\n                <FormControl>\n                    <Input placeholder=\"https://truckersmp.com/...\" {...field} />\n                </FormControl>\n                <FormMessage />\n                </FormItem>\n            )}\n            />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n            control={form.control}\n            name=\"type\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Event Type</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                    <SelectTrigger>\n                        <SelectValue placeholder=\"Select event type\" />\n                    </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                    <SelectItem value=\"internal\">Internal</SelectItem>\n                    <SelectItem value=\"partner\">Partner</SelectItem>\n                    </SelectContent>\n                </Select>\n                <FormMessage />\n                </FormItem>\n            )}\n            />\n            <FormField\n                control={form.control}\n                name=\"server\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel>Server</FormLabel>\n                    <FormControl>\n                        <Input placeholder=\"e.g., Event Server\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                    </FormItem>\n                )}\n            />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n                control={form.control}\n                name=\"departure\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel>Departure</FormLabel>\n                    <FormControl>\n                        <Input placeholder=\"e.g., Bremen\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                    </FormItem>\n                )}\n            />\n            <FormField\n                control={form.control}\n                name=\"arrival\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel>Arrival</FormLabel>\n                    <FormControl>\n                        <Input placeholder=\"e.g., Prague\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                    </FormItem>\n                )}\n            />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n                control={form.control}\n                name=\"meetupTime\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel>Meetup Time</FormLabel>\n                    <FormControl>\n                        <Input placeholder=\"e.g., 10-Oct-2025 20:30\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                    </FormItem>\n                )}\n            />\n            <FormField\n                control={form.control}\n                name=\"departureTime\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel>Departure Time</FormLabel>\n                    <FormControl>\n                        <Input placeholder=\"e.g., 10-Oct-2025 21:30\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                    </FormItem>\n                )}\n            />\n        </div>\n\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n                control={form.control}\n                name=\"attendees\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel>Attendees</FormLabel>\n                    <FormControl>\n                        <Input type=\"number\" placeholder=\"e.g., 100\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                    </FormItem>\n                )}\n            />\n            <FormField\n                control={form.control}\n                name=\"vtcs\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel>VTCs</FormLabel>\n                    <FormControl>\n                        <Input type=\"number\" placeholder=\"e.g., 30\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                    </FormItem>\n                )}\n            />\n        </div>\n\n        <FormField\n            control={form.control}\n            name=\"description\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Description</FormLabel>\n                <FormControl>\n                    <Textarea placeholder=\"Enter a description for the event\" {...field} />\n                </FormControl>\n                <FormMessage />\n                </FormItem>\n            )}\n        />\n\n        <FormField\n            control={form.control}\n            name=\"rules\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Rules</FormLabel>\n                <FormControl>\n                    <Textarea placeholder=\"Enter the rules for the event\" {...field} />\n                </FormControl>\n                <FormMessage />\n                </FormItem>\n            )}\n        />\n        \n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild>\n                <Link href=\"/admin/events\">Cancel</Link>\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Adding...</> : \"Add Event\"}\n            </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 937, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/app/current-year.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\n\nexport function CurrentYear() {\n    const [year, setYear] = useState<number | null>(null);\n\n    useEffect(() => {\n        setYear(new Date().getFullYear());\n    }, []);\n\n    if (!year) {\n        // Return a placeholder or null to avoid hydration mismatch\n        return null;\n    }\n\n    return <span>{year}</span>;\n}\n"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAIO,SAAS;;IACZ,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAEhD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACN,QAAQ,IAAI,OAAO,WAAW;QAClC;gCAAG,EAAE;IAEL,IAAI,CAAC,MAAM;QACP,2DAA2D;QAC3D,OAAO;IACX;IAEA,qBAAO,6LAAC;kBAAM;;;;;;AAClB;GAbgB;KAAA","debugId":null}}]
}