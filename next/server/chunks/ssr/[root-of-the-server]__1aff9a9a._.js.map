{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/app/logo.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\n\nexport function Logo({ className, size = 28 }: { className?: string; size?: number }) {\n  return (\n    <Image\n      src=\"https://cdn.discordapp.com/attachments/812969396540145694/1420219258834518171/unwatermark_1000037663.gif?ex=68d499c1&is=68d34841&hm=82d9ffaae644401634e086307d8324354e2c4af16d7cca6220ac687671b78a30&\"\n      alt=\"Tamil Pasanga Logo\"\n      width={size}\n      height={size}\n      className={cn(className)}\n      unoptimized\n    />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEO,SAAS,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,EAAyC;IAClF,qBACE,8OAAC,6HAAA,CAAA,UAAK;QACJ,KAAI;QACJ,KAAI;QACJ,OAAO;QACP,QAAQ;QACR,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE;QACd,WAAW;;;;;;AAGjB","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/app/current-year.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\n\nexport function CurrentYear() {\n    const [year, setYear] = useState<number | null>(null);\n\n    useEffect(() => {\n        setYear(new Date().getFullYear());\n    }, []);\n\n    if (!year) {\n        // Return a placeholder or null to avoid hydration mismatch\n        return null;\n    }\n\n    return <span>{year}</span>;\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIO,SAAS;IACZ,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAEhD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,QAAQ,IAAI,OAAO,WAAW;IAClC,GAAG,EAAE;IAEL,IAAI,CAAC,MAAM;QACP,2DAA2D;QAC3D,OAAO;IACX;IAEA,qBAAO,8OAAC;kBAAM;;;;;;AAClB","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/app/footer.tsx"],"sourcesContent":["\nimport Link from 'next/link';\nimport { Logo } from '@/components/app/logo';\nimport { Button } from '@/components/ui/button';\nimport { CurrentYear } from './current-year';\n\nexport function Footer() {\n  return (\n    <footer className=\"py-12 bg-black text-muted-foreground\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div className=\"md:col-span-1\">\n            <Link href=\"/\" className=\"flex items-center gap-2 mb-4\">\n              <Logo size={64} />\n              <span className=\"text-lg font-headline animate-rgb-text bg-gradient-to-r from-red-500 via-green-500 to-blue-500 bg-clip-text text-transparent [background-size:200%_auto]\">Tamil Pasanga</span>\n            </Link>\n            <p className=\"text-sm\">Gateway to New Horizons.</p>\n          </div>\n          <div className=\"md:col-span-1\">\n            <h4 className=\"font-semibold text-white mb-4\">Links</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/about\" className=\"hover:text-primary transition-colors\">About</Link></li>\n              <li><Link href=\"/features\" className=\"hover:text-primary transition-colors\">Features</Link></li>\n              <li><Link href=\"/gallery\" className=\"hover:text-primary transition-colors\">Gallery</Link></li>\n              <li><Link href=\"/events\" className=\"hover:text-primary transition-colors\">Events</Link></li>\n              <li><Link href=\"/news\" className=\"hover:text-primary transition-colors\">News</Link></li>\n              <li><Link href=\"/admin\" className=\"hover:text-primary transition-colors\">Admin</Link></li>\n            </ul>\n          </div>\n          <div className=\"md:col-span-1\">\n            <h4 className=\"font-semibold text-white mb-4\">Community</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"https://discord.com/invite/paRCYhJphH\" target=\"_blank\" className=\"hover:text-primary transition-colors\">Discord</Link></li>\n              <li><Link href=\"https://truckersmp.com/vtc/73933\" target=\"_blank\" className=\"hover:text-primary transition-colors\">TruckersMP</Link></li>\n            </ul>\n          </div>\n          <div className=\"md:col-span-1 space-y-4\">\n            <Button variant=\"outline\" className=\"w-full rounded-full border-primary text-primary hover:bg-primary hover:text-primary-foreground\" asChild>\n              <Link href=\"/maintenance\">Drivers Hub</Link>\n            </Button>\n            <Button className=\"w-full rounded-full\" data-apply-btn>\n                Apply Now\n            </Button>\n          </div>\n        </div>\n        <div className=\"border-t border-border/50 pt-8 text-center text-sm\">\n          <p>&copy; <CurrentYear /> Tamil Pasanga. All Rights Reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;;;;AAEO,SAAS;IACd,qBACE,8OAAC;QAAO,WAAU;kBAChB,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,4JAAA,CAAA,UAAI;oCAAC,MAAK;oCAAI,WAAU;;sDACvB,8OAAC,iIAAA,CAAA,OAAI;4CAAC,MAAM;;;;;;sDACZ,8OAAC;4CAAK,WAAU;sDAA2J;;;;;;;;;;;;8CAE7K,8OAAC;oCAAE,WAAU;8CAAU;;;;;;;;;;;;sCAEzB,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAG,WAAU;8CAAgC;;;;;;8CAC9C,8OAAC;oCAAG,WAAU;;sDACZ,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAS,WAAU;0DAAuC;;;;;;;;;;;sDACzE,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAY,WAAU;0DAAuC;;;;;;;;;;;sDAC5E,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAW,WAAU;0DAAuC;;;;;;;;;;;sDAC3E,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAU,WAAU;0DAAuC;;;;;;;;;;;sDAC1E,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAQ,WAAU;0DAAuC;;;;;;;;;;;sDACxE,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAS,WAAU;0DAAuC;;;;;;;;;;;;;;;;;;;;;;;sCAG7E,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAG,WAAU;8CAAgC;;;;;;8CAC9C,8OAAC;oCAAG,WAAU;;sDACZ,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAwC,QAAO;gDAAS,WAAU;0DAAuC;;;;;;;;;;;sDACxH,8OAAC;sDAAG,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;gDAAmC,QAAO;gDAAS,WAAU;0DAAuC;;;;;;;;;;;;;;;;;;;;;;;sCAGvH,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,kIAAA,CAAA,SAAM;oCAAC,SAAQ;oCAAU,WAAU;oCAAiG,OAAO;8CAC1I,cAAA,8OAAC,4JAAA,CAAA,UAAI;wCAAC,MAAK;kDAAe;;;;;;;;;;;8CAE5B,8OAAC,kIAAA,CAAA,SAAM;oCAAC,WAAU;oCAAsB,gBAAc;8CAAC;;;;;;;;;;;;;;;;;;8BAK3D,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;;4BAAE;0CAAO,8OAAC,4IAAA,CAAA,cAAW;;;;;4BAAG;;;;;;;;;;;;;;;;;;;;;;;AAKnC","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 601, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 643, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dropdown-menu.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 841, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/applications/server-actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport type { ApplicationStatus, ApplicationsData, Application } from '@/lib/applications';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\nimport type { EventsData, Event, Booking } from '@/lib/events';\n\nconst applicationsFilePath = path.join(process.cwd(), 'src', 'lib', 'applications.json');\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('applications.json')) {\n                return { applications: [] } as T;\n            }\n            if (filePath.includes('staff-members.json')) {\n                return { staffMembers: [] } as T;\n            }\n             if (filePath.includes('events.json')) {\n                return { events: [] } as T;\n            }\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile<T>(filePath: string, data: T): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nasync function sendApplicationWebhookNotification(application: Application) {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    switch (application.status) {\n        case 'Accepted':\n            title = `Application Accepted: ${application.id}`;\n            color = 5763719; // Green\n            description = `Congratulations to **${application.name}**! Their application has been accepted.`;\n            break;\n        case 'Rejected':\n            title = `Application Rejected: ${application.id}`;\n            color = 15548997; // Red\n            description = `Application for **${application.name}** has been rejected.`;\n            break;\n        case 'Interview':\n            title = `Application Moved to Interview: ${application.id}`;\n            color = 3447003; // Blue\n            description = `**${application.name}** has been moved to the interview stage.`;\n            break;\n        default:\n            return; // Don't send for 'Pending' or other statuses\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        fields: [\n            { name: 'Applicant Name', value: application.name, inline: true },\n            { name: 'Discord Tag', value: application.discordTag, inline: true },\n        ],\n        footer: {\n            text: 'Tamil Pasanga VTC | Application Status Update',\n        },\n    };\n\n    const payload = { embeds: [embed] };\n\n    try {\n        const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n            console.error(`Discord webhook failed with status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error sending Discord webhook notification:', error);\n    }\n}\n\n\nexport async function getApplications(): Promise<Application[]> {\n    const data = await readJsonFile<ApplicationsData>(applicationsFilePath);\n    // Sort by submission date, newest first\n    return data.applications.sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime());\n}\n\nexport async function updateApplicationStatus(\n  applicationId: string,\n  newStatus: ApplicationStatus,\n  role?: string\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const applicationsData = await readJsonFile<ApplicationsData>(applicationsFilePath);\n        const staffData = await readJsonFile<StaffData>(staffFilePath);\n\n        const appIndex = applicationsData.applications.findIndex((app) => app.id === applicationId);\n\n        if (appIndex === -1) {\n            return { success: false, message: `Application with ID ${applicationId} not found.` };\n        }\n        \n        const application = applicationsData.applications[appIndex];\n        \n        // Update status in applications.json\n        application.status = newStatus;\n        await writeJsonFile(applicationsFilePath, applicationsData);\n\n        // If accepted, add to staff-members.json if not already present\n        if (newStatus === 'Accepted') {\n            const isAlreadyStaff = staffData.staffMembers.some(member => member.name === application.name);\n            if (!isAlreadyStaff) {\n                const newMember: StaffMember = {\n                    id: `staff-${Date.now()}`,\n                    name: application.name,\n                    role: role || 'Trainee',\n                    imageId: 'testimonial-avatar',\n                    imageUrl: \"https://media.discordapp.net/attachments/1116720480544636999/1274425873201631304/TP_NEW_WB_PNGxxxhdpi.png?ex=68d4d8d5&is=68d38755&hm=b6d4e0e4ef2c3215a4de4fb2f592189a60ddd94c651f96fe04deac2e7f96ddc6&=&format=webp&quality=lossless&width=826&height=826\",\n                    steamUrl: application.steamUrl,\n                    truckersmpUrl: \"\",\n                };\n                staffData.staffMembers.push(newMember);\n                await writeJsonFile(staffFilePath, staffData);\n            }\n        }\n\n        revalidatePath('/admin/applications');\n        revalidatePath('/staff');\n        \n        // Send Discord notification\n        await sendApplicationWebhookNotification(application);\n\n        return { success: true, message: 'Application status updated successfully.' };\n    } catch (error) {\n        console.error('Error updating application status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n\n// --- Booking Actions ---\n\nexport async function getEventsWithBookings(): Promise<Event[]> {\n    const data = await readJsonFile<EventsData>(eventsFilePath);\n    return data.events.filter(event => event.slots && event.slots.some(slot => slot.bookings && slot.bookings.length > 0));\n}\n\nasync function sendBookingWebhookNotification(booking: Booking, event: Event, newStatus: 'approved' | 'rejected') {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    if (newStatus === 'approved') {\n        title = `Booking Approved: ${booking.vtcName}`;\n        color = 5763719; // Green\n        description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been approved.`;\n    } else {\n        title = `Booking Rejected: ${booking.vtcName}`;\n        color = 15548997; // Red\n        description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been rejected.`;\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        footer: { text: 'Tamil Pasanga VTC | Slot Booking Update' },\n    };\n\n    try {\n        await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ embeds: [embed] }),\n        });\n    } catch (error) {\n        console.error('Error sending booking status webhook:', error);\n    }\n}\n\n\nexport async function updateBookingStatus(\n    eventId: string,\n    areaId: string,\n    bookingId: string,\n    newStatus: 'approved' | 'rejected'\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n        const event = eventsData.events.find(e => e.id === eventId);\n        if (!event || !event.slots) return { success: false, message: 'Event not found.' };\n\n        const area = event.slots.find(a => a.id === areaId);\n        if (!area || !area.bookings) return { success: false, message: 'Slot area not found.' };\n        \n        const booking = area.bookings.find(b => b.id === bookingId);\n        if (!booking) return { success: false, message: 'Booking not found.' };\n\n        booking.status = newStatus;\n        \n        await writeJsonFile(eventsFilePath, eventsData);\n        \n        await sendBookingWebhookNotification(booking, event, newStatus);\n        \n        revalidatePath('/admin/applications');\n        revalidatePath(`/events/${eventId}`);\n        \n        return { success: true, message: `Booking status updated to ${newStatus}.` };\n\n    } catch (error) {\n        console.error('Error updating booking status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IA2GsB,0BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 854, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/applications/server-actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport type { ApplicationStatus, ApplicationsData, Application } from '@/lib/applications';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\nimport type { EventsData, Event, Booking } from '@/lib/events';\n\nconst applicationsFilePath = path.join(process.cwd(), 'src', 'lib', 'applications.json');\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('applications.json')) {\n                return { applications: [] } as T;\n            }\n            if (filePath.includes('staff-members.json')) {\n                return { staffMembers: [] } as T;\n            }\n             if (filePath.includes('events.json')) {\n                return { events: [] } as T;\n            }\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile<T>(filePath: string, data: T): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nasync function sendApplicationWebhookNotification(application: Application) {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    switch (application.status) {\n        case 'Accepted':\n            title = `Application Accepted: ${application.id}`;\n            color = 5763719; // Green\n            description = `Congratulations to **${application.name}**! Their application has been accepted.`;\n            break;\n        case 'Rejected':\n            title = `Application Rejected: ${application.id}`;\n            color = 15548997; // Red\n            description = `Application for **${application.name}** has been rejected.`;\n            break;\n        case 'Interview':\n            title = `Application Moved to Interview: ${application.id}`;\n            color = 3447003; // Blue\n            description = `**${application.name}** has been moved to the interview stage.`;\n            break;\n        default:\n            return; // Don't send for 'Pending' or other statuses\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        fields: [\n            { name: 'Applicant Name', value: application.name, inline: true },\n            { name: 'Discord Tag', value: application.discordTag, inline: true },\n        ],\n        footer: {\n            text: 'Tamil Pasanga VTC | Application Status Update',\n        },\n    };\n\n    const payload = { embeds: [embed] };\n\n    try {\n        const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n            console.error(`Discord webhook failed with status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error sending Discord webhook notification:', error);\n    }\n}\n\n\nexport async function getApplications(): Promise<Application[]> {\n    const data = await readJsonFile<ApplicationsData>(applicationsFilePath);\n    // Sort by submission date, newest first\n    return data.applications.sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime());\n}\n\nexport async function updateApplicationStatus(\n  applicationId: string,\n  newStatus: ApplicationStatus,\n  role?: string\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const applicationsData = await readJsonFile<ApplicationsData>(applicationsFilePath);\n        const staffData = await readJsonFile<StaffData>(staffFilePath);\n\n        const appIndex = applicationsData.applications.findIndex((app) => app.id === applicationId);\n\n        if (appIndex === -1) {\n            return { success: false, message: `Application with ID ${applicationId} not found.` };\n        }\n        \n        const application = applicationsData.applications[appIndex];\n        \n        // Update status in applications.json\n        application.status = newStatus;\n        await writeJsonFile(applicationsFilePath, applicationsData);\n\n        // If accepted, add to staff-members.json if not already present\n        if (newStatus === 'Accepted') {\n            const isAlreadyStaff = staffData.staffMembers.some(member => member.name === application.name);\n            if (!isAlreadyStaff) {\n                const newMember: StaffMember = {\n                    id: `staff-${Date.now()}`,\n                    name: application.name,\n                    role: role || 'Trainee',\n                    imageId: 'testimonial-avatar',\n                    imageUrl: \"https://media.discordapp.net/attachments/1116720480544636999/1274425873201631304/TP_NEW_WB_PNGxxxhdpi.png?ex=68d4d8d5&is=68d38755&hm=b6d4e0e4ef2c3215a4de4fb2f592189a60ddd94c651f96fe04deac2e7f96ddc6&=&format=webp&quality=lossless&width=826&height=826\",\n                    steamUrl: application.steamUrl,\n                    truckersmpUrl: \"\",\n                };\n                staffData.staffMembers.push(newMember);\n                await writeJsonFile(staffFilePath, staffData);\n            }\n        }\n\n        revalidatePath('/admin/applications');\n        revalidatePath('/staff');\n        \n        // Send Discord notification\n        await sendApplicationWebhookNotification(application);\n\n        return { success: true, message: 'Application status updated successfully.' };\n    } catch (error) {\n        console.error('Error updating application status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n\n// --- Booking Actions ---\n\nexport async function getEventsWithBookings(): Promise<Event[]> {\n    const data = await readJsonFile<EventsData>(eventsFilePath);\n    return data.events.filter(event => event.slots && event.slots.some(slot => slot.bookings && slot.bookings.length > 0));\n}\n\nasync function sendBookingWebhookNotification(booking: Booking, event: Event, newStatus: 'approved' | 'rejected') {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    if (newStatus === 'approved') {\n        title = `Booking Approved: ${booking.vtcName}`;\n        color = 5763719; // Green\n        description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been approved.`;\n    } else {\n        title = `Booking Rejected: ${booking.vtcName}`;\n        color = 15548997; // Red\n        description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been rejected.`;\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        footer: { text: 'Tamil Pasanga VTC | Slot Booking Update' },\n    };\n\n    try {\n        await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ embeds: [embed] }),\n        });\n    } catch (error) {\n        console.error('Error sending booking status webhook:', error);\n    }\n}\n\n\nexport async function updateBookingStatus(\n    eventId: string,\n    areaId: string,\n    bookingId: string,\n    newStatus: 'approved' | 'rejected'\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n        const event = eventsData.events.find(e => e.id === eventId);\n        if (!event || !event.slots) return { success: false, message: 'Event not found.' };\n\n        const area = event.slots.find(a => a.id === areaId);\n        if (!area || !area.bookings) return { success: false, message: 'Slot area not found.' };\n        \n        const booking = area.bookings.find(b => b.id === bookingId);\n        if (!booking) return { success: false, message: 'Booking not found.' };\n\n        booking.status = newStatus;\n        \n        await writeJsonFile(eventsFilePath, eventsData);\n        \n        await sendBookingWebhookNotification(booking, event, newStatus);\n        \n        revalidatePath('/admin/applications');\n        revalidatePath(`/events/${eventId}`);\n        \n        return { success: true, message: `Booking status updated to ${newStatus}.` };\n\n    } catch (error) {\n        console.error('Error updating booking status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IA+MsB,sBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 867, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/applications/actions.tsx"],"sourcesContent":["\n'use client';\n\nimport { useTransition, useState } from 'react';\nimport { updateApplicationStatus as updateStatusAction, updateBookingStatus as updateBookingAction } from './server-actions';\nimport type { ApplicationStatus } from '@/lib/applications';\nimport { DropdownMenuItem, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuPortal, DropdownMenuRadioGroup, DropdownMenuRadioItem } from '@/components/ui/dropdown-menu';\nimport { CheckCircle, XCircle, AlertCircle, Loader2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst roleOptions = [\n    'Managing Director', 'Marketing Executive', 'Human Resource Staff', 'Trainer',\n    'Event Staff', 'Event Organizer', 'Media Staff', 'Media Editor',\n    'Senior Driver', 'Driver', 'Trainee'\n];\n\nconst statusConfig = {\n    Accepted: { icon: <CheckCircle className=\"mr-2 h-4 w-4\" />, label: 'Accept', className: 'text-green-500' },\n    Rejected: { icon: <XCircle className=\"mr-2 h-4 w-4\" />, label: 'Reject', className: 'text-red-500' },\n    Interview: { icon: <AlertCircle className=\"mr-2 h-4 w-4\" />, label: 'Mark for Interview', className: 'text-blue-500' },\n    Pending: { icon: <div/>, label: 'Pending', className: ''}\n};\n\n\nexport function UpdateApplicationStatus({\n  applicationId,\n  status,\n  currentStatus,\n}: {\n  applicationId: string;\n  status: ApplicationStatus;\n  currentStatus: ApplicationStatus;\n}) {\n  const [isPending, startTransition] = useTransition();\n  const [selectedRole, setSelectedRole] = useState('Trainee');\n  const { toast } = useToast();\n  const config = statusConfig[status];\n\n  const handleUpdate = (role?: string) => {\n    startTransition(async () => {\n      const result = await updateStatusAction(applicationId, status, role);\n      if (result.success) {\n        toast({ title: 'Success', description: 'Application status updated.' });\n      } else {\n        toast({ variant: 'destructive', title: 'Error', description: result.message });\n      }\n    });\n  };\n  \n  const isDisabled = isPending || currentStatus === status;\n\n\n  if (status === 'Accepted') {\n    return (\n       <DropdownMenuSub>\n        <DropdownMenuSubTrigger\n          disabled={isDisabled}\n          className={config.className}\n        >\n          {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : config.icon}\n          {config.label}\n        </DropdownMenuSubTrigger>\n        <DropdownMenuPortal>\n            <DropdownMenuSubContent>\n                <DropdownMenuRadioGroup value={selectedRole} onValueChange={setSelectedRole}>\n                    {roleOptions.map((role) => (\n                        <DropdownMenuRadioItem key={role} value={role}>\n                            {role}\n                        </DropdownMenuRadioItem>\n                    ))}\n                </DropdownMenuRadioGroup>\n                <DropdownMenuItem\n                    onClick={() => handleUpdate(selectedRole)}\n                    className=\"mt-2 justify-center bg-primary text-primary-foreground hover:bg-primary/90 focus:bg-primary focus:text-primary-foreground\"\n                >\n                    Confirm Acceptance\n                </DropdownMenuItem>\n            </DropdownMenuSubContent>\n        </DropdownMenuPortal>\n      </DropdownMenuSub>\n    );\n  }\n\n\n  return (\n    <DropdownMenuItem\n      onClick={() => handleUpdate()}\n      disabled={isDisabled}\n      className={config.className}\n      onSelect={(e) => e.preventDefault()}\n    >\n      {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : config.icon}\n      {config.label}\n    </DropdownMenuItem>\n  );\n}\n\nexport function UpdateBookingStatus({\n    eventId,\n    areaId,\n    bookingId,\n    newStatus,\n}: {\n    eventId: string;\n    areaId: string;\n    bookingId: string;\n    newStatus: 'approved' | 'rejected';\n}) {\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n    \n    const isApproval = newStatus === 'approved';\n    const icon = isApproval ? <CheckCircle className=\"mr-2 h-4 w-4 text-green-500\" /> : <XCircle className=\"mr-2 h-4 w-4 text-red-500\" />;\n    const label = isApproval ? 'Approve' : 'Reject';\n    const className = isApproval ? 'text-green-500' : 'text-red-500';\n\n    const handleUpdate = () => {\n        startTransition(async () => {\n            const result = await updateBookingAction(eventId, areaId, bookingId, newStatus);\n            if (result.success) {\n                toast({ title: 'Success', description: result.message });\n            } else {\n                toast({ variant: 'destructive', title: 'Error', description: result.message });\n            }\n        });\n    };\n\n    return (\n        <DropdownMenuItem\n            onClick={handleUpdate}\n            disabled={isPending}\n            className={className}\n            onSelect={(e) => e.preventDefault()}\n        >\n            {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : icon}\n            {label}\n        </DropdownMenuItem>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1119, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/applications/server-actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport type { ApplicationStatus, ApplicationsData, Application } from '@/lib/applications';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\nimport type { EventsData, Event, Booking } from '@/lib/events';\n\nconst applicationsFilePath = path.join(process.cwd(), 'src', 'lib', 'applications.json');\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('applications.json')) {\n                return { applications: [] } as T;\n            }\n            if (filePath.includes('staff-members.json')) {\n                return { staffMembers: [] } as T;\n            }\n             if (filePath.includes('events.json')) {\n                return { events: [] } as T;\n            }\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile<T>(filePath: string, data: T): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nasync function sendApplicationWebhookNotification(application: Application) {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    switch (application.status) {\n        case 'Accepted':\n            title = `Application Accepted: ${application.id}`;\n            color = 5763719; // Green\n            description = `Congratulations to **${application.name}**! Their application has been accepted.`;\n            break;\n        case 'Rejected':\n            title = `Application Rejected: ${application.id}`;\n            color = 15548997; // Red\n            description = `Application for **${application.name}** has been rejected.`;\n            break;\n        case 'Interview':\n            title = `Application Moved to Interview: ${application.id}`;\n            color = 3447003; // Blue\n            description = `**${application.name}** has been moved to the interview stage.`;\n            break;\n        default:\n            return; // Don't send for 'Pending' or other statuses\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        fields: [\n            { name: 'Applicant Name', value: application.name, inline: true },\n            { name: 'Discord Tag', value: application.discordTag, inline: true },\n        ],\n        footer: {\n            text: 'Tamil Pasanga VTC | Application Status Update',\n        },\n    };\n\n    const payload = { embeds: [embed] };\n\n    try {\n        const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n            console.error(`Discord webhook failed with status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error sending Discord webhook notification:', error);\n    }\n}\n\n\nexport async function getApplications(): Promise<Application[]> {\n    const data = await readJsonFile<ApplicationsData>(applicationsFilePath);\n    // Sort by submission date, newest first\n    return data.applications.sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime());\n}\n\nexport async function updateApplicationStatus(\n  applicationId: string,\n  newStatus: ApplicationStatus,\n  role?: string\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const applicationsData = await readJsonFile<ApplicationsData>(applicationsFilePath);\n        const staffData = await readJsonFile<StaffData>(staffFilePath);\n\n        const appIndex = applicationsData.applications.findIndex((app) => app.id === applicationId);\n\n        if (appIndex === -1) {\n            return { success: false, message: `Application with ID ${applicationId} not found.` };\n        }\n        \n        const application = applicationsData.applications[appIndex];\n        \n        // Update status in applications.json\n        application.status = newStatus;\n        await writeJsonFile(applicationsFilePath, applicationsData);\n\n        // If accepted, add to staff-members.json if not already present\n        if (newStatus === 'Accepted') {\n            const isAlreadyStaff = staffData.staffMembers.some(member => member.name === application.name);\n            if (!isAlreadyStaff) {\n                const newMember: StaffMember = {\n                    id: `staff-${Date.now()}`,\n                    name: application.name,\n                    role: role || 'Trainee',\n                    imageId: 'testimonial-avatar',\n                    imageUrl: \"https://media.discordapp.net/attachments/1116720480544636999/1274425873201631304/TP_NEW_WB_PNGxxxhdpi.png?ex=68d4d8d5&is=68d38755&hm=b6d4e0e4ef2c3215a4de4fb2f592189a60ddd94c651f96fe04deac2e7f96ddc6&=&format=webp&quality=lossless&width=826&height=826\",\n                    steamUrl: application.steamUrl,\n                    truckersmpUrl: \"\",\n                };\n                staffData.staffMembers.push(newMember);\n                await writeJsonFile(staffFilePath, staffData);\n            }\n        }\n\n        revalidatePath('/admin/applications');\n        revalidatePath('/staff');\n        \n        // Send Discord notification\n        await sendApplicationWebhookNotification(application);\n\n        return { success: true, message: 'Application status updated successfully.' };\n    } catch (error) {\n        console.error('Error updating application status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n\n// --- Booking Actions ---\n\nexport async function getEventsWithBookings(): Promise<Event[]> {\n    const data = await readJsonFile<EventsData>(eventsFilePath);\n    return data.events.filter(event => event.slots && event.slots.some(slot => slot.bookings && slot.bookings.length > 0));\n}\n\nasync function sendBookingWebhookNotification(booking: Booking, event: Event, newStatus: 'approved' | 'rejected') {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    if (newStatus === 'approved') {\n        title = `Booking Approved: ${booking.vtcName}`;\n        color = 5763719; // Green\n        description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been approved.`;\n    } else {\n        title = `Booking Rejected: ${booking.vtcName}`;\n        color = 15548997; // Red\n        description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been rejected.`;\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        footer: { text: 'Tamil Pasanga VTC | Slot Booking Update' },\n    };\n\n    try {\n        await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ embeds: [embed] }),\n        });\n    } catch (error) {\n        console.error('Error sending booking status webhook:', error);\n    }\n}\n\n\nexport async function updateBookingStatus(\n    eventId: string,\n    areaId: string,\n    bookingId: string,\n    newStatus: 'approved' | 'rejected'\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n        const event = eventsData.events.find(e => e.id === eventId);\n        if (!event || !event.slots) return { success: false, message: 'Event not found.' };\n\n        const area = event.slots.find(a => a.id === areaId);\n        if (!area || !area.bookings) return { success: false, message: 'Slot area not found.' };\n        \n        const booking = area.bookings.find(b => b.id === bookingId);\n        if (!booking) return { success: false, message: 'Booking not found.' };\n\n        booking.status = newStatus;\n        \n        await writeJsonFile(eventsFilePath, eventsData);\n        \n        await sendBookingWebhookNotification(booking, event, newStatus);\n        \n        revalidatePath('/admin/applications');\n        revalidatePath(`/events/${eventId}`);\n        \n        return { success: true, message: `Booking status updated to ${newStatus}.` };\n\n    } catch (error) {\n        console.error('Error updating booking status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAqGsB,kBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1132, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/applications/server-actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport type { ApplicationStatus, ApplicationsData, Application } from '@/lib/applications';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\nimport type { EventsData, Event, Booking } from '@/lib/events';\n\nconst applicationsFilePath = path.join(process.cwd(), 'src', 'lib', 'applications.json');\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('applications.json')) {\n                return { applications: [] } as T;\n            }\n            if (filePath.includes('staff-members.json')) {\n                return { staffMembers: [] } as T;\n            }\n             if (filePath.includes('events.json')) {\n                return { events: [] } as T;\n            }\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile<T>(filePath: string, data: T): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nasync function sendApplicationWebhookNotification(application: Application) {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    switch (application.status) {\n        case 'Accepted':\n            title = `Application Accepted: ${application.id}`;\n            color = 5763719; // Green\n            description = `Congratulations to **${application.name}**! Their application has been accepted.`;\n            break;\n        case 'Rejected':\n            title = `Application Rejected: ${application.id}`;\n            color = 15548997; // Red\n            description = `Application for **${application.name}** has been rejected.`;\n            break;\n        case 'Interview':\n            title = `Application Moved to Interview: ${application.id}`;\n            color = 3447003; // Blue\n            description = `**${application.name}** has been moved to the interview stage.`;\n            break;\n        default:\n            return; // Don't send for 'Pending' or other statuses\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        fields: [\n            { name: 'Applicant Name', value: application.name, inline: true },\n            { name: 'Discord Tag', value: application.discordTag, inline: true },\n        ],\n        footer: {\n            text: 'Tamil Pasanga VTC | Application Status Update',\n        },\n    };\n\n    const payload = { embeds: [embed] };\n\n    try {\n        const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n            console.error(`Discord webhook failed with status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error sending Discord webhook notification:', error);\n    }\n}\n\n\nexport async function getApplications(): Promise<Application[]> {\n    const data = await readJsonFile<ApplicationsData>(applicationsFilePath);\n    // Sort by submission date, newest first\n    return data.applications.sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime());\n}\n\nexport async function updateApplicationStatus(\n  applicationId: string,\n  newStatus: ApplicationStatus,\n  role?: string\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const applicationsData = await readJsonFile<ApplicationsData>(applicationsFilePath);\n        const staffData = await readJsonFile<StaffData>(staffFilePath);\n\n        const appIndex = applicationsData.applications.findIndex((app) => app.id === applicationId);\n\n        if (appIndex === -1) {\n            return { success: false, message: `Application with ID ${applicationId} not found.` };\n        }\n        \n        const application = applicationsData.applications[appIndex];\n        \n        // Update status in applications.json\n        application.status = newStatus;\n        await writeJsonFile(applicationsFilePath, applicationsData);\n\n        // If accepted, add to staff-members.json if not already present\n        if (newStatus === 'Accepted') {\n            const isAlreadyStaff = staffData.staffMembers.some(member => member.name === application.name);\n            if (!isAlreadyStaff) {\n                const newMember: StaffMember = {\n                    id: `staff-${Date.now()}`,\n                    name: application.name,\n                    role: role || 'Trainee',\n                    imageId: 'testimonial-avatar',\n                    imageUrl: \"https://media.discordapp.net/attachments/1116720480544636999/1274425873201631304/TP_NEW_WB_PNGxxxhdpi.png?ex=68d4d8d5&is=68d38755&hm=b6d4e0e4ef2c3215a4de4fb2f592189a60ddd94c651f96fe04deac2e7f96ddc6&=&format=webp&quality=lossless&width=826&height=826\",\n                    steamUrl: application.steamUrl,\n                    truckersmpUrl: \"\",\n                };\n                staffData.staffMembers.push(newMember);\n                await writeJsonFile(staffFilePath, staffData);\n            }\n        }\n\n        revalidatePath('/admin/applications');\n        revalidatePath('/staff');\n        \n        // Send Discord notification\n        await sendApplicationWebhookNotification(application);\n\n        return { success: true, message: 'Application status updated successfully.' };\n    } catch (error) {\n        console.error('Error updating application status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n\n// --- Booking Actions ---\n\nexport async function getEventsWithBookings(): Promise<Event[]> {\n    const data = await readJsonFile<EventsData>(eventsFilePath);\n    return data.events.filter(event => event.slots && event.slots.some(slot => slot.bookings && slot.bookings.length > 0));\n}\n\nasync function sendBookingWebhookNotification(booking: Booking, event: Event, newStatus: 'approved' | 'rejected') {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    if (newStatus === 'approved') {\n        title = `Booking Approved: ${booking.vtcName}`;\n        color = 5763719; // Green\n        description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been approved.`;\n    } else {\n        title = `Booking Rejected: ${booking.vtcName}`;\n        color = 15548997; // Red\n        description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been rejected.`;\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        footer: { text: 'Tamil Pasanga VTC | Slot Booking Update' },\n    };\n\n    try {\n        await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ embeds: [embed] }),\n        });\n    } catch (error) {\n        console.error('Error sending booking status webhook:', error);\n    }\n}\n\n\nexport async function updateBookingStatus(\n    eventId: string,\n    areaId: string,\n    bookingId: string,\n    newStatus: 'approved' | 'rejected'\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n        const event = eventsData.events.find(e => e.id === eventId);\n        if (!event || !event.slots) return { success: false, message: 'Event not found.' };\n\n        const area = event.slots.find(a => a.id === areaId);\n        if (!area || !area.bookings) return { success: false, message: 'Slot area not found.' };\n        \n        const booking = area.bookings.find(b => b.id === bookingId);\n        if (!booking) return { success: false, message: 'Booking not found.' };\n\n        booking.status = newStatus;\n        \n        await writeJsonFile(eventsFilePath, eventsData);\n        \n        await sendBookingWebhookNotification(booking, event, newStatus);\n        \n        revalidatePath('/admin/applications');\n        revalidatePath(`/events/${eventId}`);\n        \n        return { success: true, message: `Booking status updated to ${newStatus}.` };\n\n    } catch (error) {\n        console.error('Error updating booking status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAiKsB,wBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1145, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAClD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 1169, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/applications/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Footer } from \"@/components/app/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { Application } from \"@/lib/applications\";\nimport { CheckCircle, Clock, FileText, MoreHorizontal, XCircle, AlertCircle, ChevronDown, ChevronUp } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { format } from 'date-fns';\nimport { UpdateApplicationStatus, UpdateBookingStatus } from \"./actions\";\nimport { getApplications, getEventsWithBookings } from './server-actions';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport type { Event } from '@/lib/events';\n\nconst statusInfo = {\n    Accepted: { icon: <CheckCircle className=\"h-4 w-4 text-green-500\" />, badge: <Badge variant=\"default\" className=\"bg-green-500\">Accepted</Badge> },\n    Pending: { icon: <Clock className=\"h-4 w-4 text-yellow-500\" />, badge: <Badge variant=\"secondary\" className=\"bg-yellow-500\">Pending</Badge> },\n    Rejected: { icon: <XCircle className=\"h-4 w-4 text-red-500\" />, badge: <Badge variant=\"destructive\">Rejected</Badge> },\n    Interview: { icon: <AlertCircle className=\"h-4 w-4 text-blue-500\" />, badge: <Badge className=\"bg-blue-500\">Interview</Badge> },\n};\n\nfunction ApplicationRow({ app }: { app: Application }) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <React.Fragment>\n            <TableRow>\n                <TableCell>\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => setIsOpen(!isOpen)} className=\"group\">\n                        <ChevronDown className={isOpen ? \"hidden\" : \"h-4 w-4\"} />\n                        <ChevronUp className={isOpen ? \"h-4 w-4\" : \"hidden\"} />\n                    </Button>\n                </TableCell>\n                <TableCell className=\"font-medium\">{app.id}</TableCell>\n                <TableCell>{app.name}</TableCell>\n                <TableCell>{app.discordTag}</TableCell>\n                <TableCell>{format(new Date(app.submittedAt), 'PPp')}</TableCell>\n                <TableCell>{statusInfo[app.status]?.badge || app.status}</TableCell>\n                <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <span className=\"sr-only\">Open menu</span>\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                            <UpdateApplicationStatus applicationId={app.id} status=\"Accepted\" currentStatus={app.status} />\n                            <UpdateApplicationStatus applicationId={app.id} status=\"Rejected\" currentStatus={app.status} />\n                            <UpdateApplicationStatus applicationId={app.id} status=\"Interview\" currentStatus={app.status} />\n                        </DropdownMenuContent>\n                    </DropdownMenu>\n                </TableCell>\n            </TableRow>\n            {isOpen && (\n                <TableRow className=\"bg-muted/50\">\n                    <TableCell colSpan={7} className=\"p-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                            <div><strong>Email:</strong> {app.email}</div>\n                            <div><strong>Experience:</strong> <span className=\"capitalize\">{app.experience}</span></div>\n                            <div>\n                                <strong>Steam Profile:</strong>\n                                <Link href={app.steamUrl} target=\"_blank\" className=\"text-primary hover:underline ml-2\">View Profile</Link>\n                            </div>\n                            <div className=\"col-span-full\">\n                                <strong>How they found us:</strong> <span className=\"capitalize\">{app.howYouFound}</span>\n                                {app.howYouFound === 'friends' && app.friendsMention && ` - ${app.friendsMention}`}\n                                {app.howYouFound === 'others' && app.othersMention && ` - ${app.othersMention}`}\n                            </div>\n                        </div>\n                    </TableCell>\n                </TableRow>\n            )}\n        </React.Fragment>\n    );\n}\n\nfunction BookingRow({ event, area, booking }: { event: Event; area: NonNullable<Event['slots']>[0]; booking: NonNullable<NonNullable<Event['slots']>[0]['bookings']>[0] }) {\n  return (\n     <TableRow>\n        <TableCell></TableCell>\n        <TableCell className=\"font-medium\">{booking.id}</TableCell>\n        <TableCell>{booking.vtcName}</TableCell>\n        <TableCell>{event.title}</TableCell>\n        <TableCell>Slot #{booking.slotNumber} ({area.areaName})</TableCell>\n        <TableCell><Badge className={booking.status === 'approved' ? 'bg-green-500' : booking.status === 'rejected' ? 'bg-red-500' : 'bg-yellow-500'}>{booking.status}</Badge></TableCell>\n        <TableCell className=\"text-right\">\n             <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"h-8 w-8 p-0\" disabled={booking.status !== 'pending'}>\n                    <span className=\"sr-only\">Open menu</span>\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                    <UpdateBookingStatus eventId={event.id} areaId={area.id} bookingId={booking.id} newStatus=\"approved\" />\n                    <UpdateBookingStatus eventId={event.id} areaId={area.id} bookingId={booking.id} newStatus=\"rejected\" />\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </TableCell>\n    </TableRow>\n  );\n}\n\n\nexport default function ApplicationsAdminPage() {\n    const [applications, setApplications] = useState<Application[]>([]);\n    const [bookingEvents, setBookingEvents] = useState<Event[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function loadData() {\n            setIsLoading(true);\n            try {\n                const [fetchedApplications, fetchedEvents] = await Promise.all([\n                    getApplications(),\n                    getEventsWithBookings()\n                ]);\n                setApplications(fetchedApplications);\n                setBookingEvents(fetchedEvents);\n            } catch (error) {\n                console.error(\"Failed to load data:\", error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        loadData();\n    }, []);\n    \n    const allBookings = bookingEvents.flatMap(event => \n        event.slots?.flatMap(area => \n            area.bookings?.map(booking => ({ event, area, booking })) || []\n        ) || []\n    );\n\n\n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <main className=\"flex-grow p-4 md:p-8\">\n                <div className=\"max-w-7xl mx-auto\">\n                    <div className=\"flex items-center justify-between mb-8\">\n                        <h1 className=\"text-3xl font-headline flex items-center gap-2\">\n                            <FileText />\n                            Manage Applications & Bookings\n                        </h1>\n                    </div>\n\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>All Applications</CardTitle>\n                            <CardDescription>\n                                {isLoading ? 'Loading applications...' : `${applications.length} application(s) found.`}\n                            </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead className=\"w-12\"></TableHead>\n                                        <TableHead>ID</TableHead>\n                                        <TableHead>Name</TableHead>\n                                        <TableHead>Discord Tag</TableHead>\n                                        <TableHead>Submitted At</TableHead>\n                                        <TableHead>Status</TableHead>\n                                        <TableHead className=\"text-right\">Actions</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {isLoading ? (\n                                        Array.from({ length: 5 }).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell colSpan={7}>\n                                                    <Skeleton className=\"h-8 w-full\" />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    ) : (\n                                        applications.map((app) => (\n                                            <ApplicationRow key={app.id} app={app} />\n                                        ))\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </CardContent>\n                    </Card>\n                    \n                     <Card className=\"mt-8\">\n                        <CardHeader>\n                            <CardTitle>Slot Booking Requests</CardTitle>\n                            <CardDescription>\n                                {isLoading ? 'Loading booking requests...' : `${allBookings.length} booking request(s) found.`}\n                            </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                           <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead className=\"w-12\"></TableHead>\n                                        <TableHead>Booking ID</TableHead>\n                                        <TableHead>VTC Name</TableHead>\n                                        <TableHead>Event</TableHead>\n                                        <TableHead>Slot</TableHead>\n                                        <TableHead>Status</TableHead>\n                                        <TableHead className=\"text-right\">Actions</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                     {isLoading ? (\n                                        Array.from({ length: 3 }).map((_, index) => (\n                                            <TableRow key={`booking-skel-${index}`}>\n                                                <TableCell colSpan={7}>\n                                                    <Skeleton className=\"h-8 w-full\" />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    ) : allBookings.length > 0 ? (\n                                        allBookings.map(({ event, area, booking }) => (\n                                            <BookingRow key={booking.id} event={event} area={area} booking={booking} />\n                                        ))\n                                    ) : (\n                                        <TableRow>\n                                            <TableCell colSpan={7} className=\"text-center\">No booking requests found.</TableCell>\n                                        </TableRow>\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </CardContent>\n                    </Card>\n\n                     <div className=\"mt-8 text-center\">\n                        <Button variant=\"outline\" asChild>\n                            <Link href=\"/admin\">Back to Admin</Link>\n                        </Button>\n                    </div>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}