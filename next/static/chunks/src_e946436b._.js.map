{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/driver-hub/%28hub%29/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { VtcStats, LeaderboardUser, Job, LiveDriver, Driver, Skill, DriverSkill, Route, LiveDelivery } from '@/lib/truckershub-types';\n\ntype ApiResponse<T> = {\n    status?: boolean;\n    response?: T;\n    drivers?: Driver[]; // for drivers endpoint\n    jobs?: Job[]; // for jobs endpoint\n    skills?: Skill[] | DriverSkill[]; // for skills endpoint\n    routes?: Route[];\n};\n\n// This function should be executed on the server where process.env is available.\nasync function fetchFromTruckersHub<T>(endpoint: string, params?: URLSearchParams): Promise<T | null> {\n    const apiKey = process.env.TRUCKERSHUB_API_KEY;\n    if (!apiKey) {\n        console.error(\"TRUCKERSHUB_API_KEY is not set.\");\n        return null;\n    }\n\n    try {\n        const url = new URL(`https://api.truckershub.in/v1/${endpoint}`);\n        if (params) {\n            params.forEach((value, key) => {\n                url.searchParams.append(key, value);\n            });\n        }\n        \n        const res = await fetch(url.toString(), {\n             headers: {\n                'Authorization': apiKey,\n                'Content-Type': 'application/json',\n                'User-Agent': 'TamilPasangaVTC/1.0',\n            },\n            next: { revalidate: 300 } // Revalidate every 5 minutes\n        });\n\n\n        if (!res.ok) {\n            console.error(`Failed to fetch from TruckersHub (${endpoint}):`, res.status, await res.text());\n            return null;\n        }\n\n        const data: ApiResponse<T> = await res.json();\n        \n        if (data && (data.status || data.drivers || data.jobs || data.skills || data.routes || Array.isArray(data))) {\n            // Handle different possible response structures\n            if (data.response) return data.response as T;\n            if (data.drivers) return { drivers: data.drivers } as T;\n            if (data.jobs) return { jobs: data.jobs } as T;\n            if (data.skills) return { skills: data.skills } as T;\n            if (data.routes) return data.routes as T;\n             if (Array.isArray(data)) return data as T;\n            return data as T;\n        }\n\n        if (data && data.status === false) {\n             // Avoid logging empty responses as errors\n             if (Object.keys(data).length > 2) { \n                console.error(`TruckersHub API returned status false for ${endpoint}:`, data);\n             }\n             return null;\n        }\n        \n        return null;\n\n    } catch (error) {\n        console.error(`Error fetching from TruckersHub (${endpoint}):`, error);\n        return null;\n    }\n}\n\n\nexport async function getDashboardData() {\n    try {\n        const [statsData, allTime, monthly, jobs, liveDrivers] = await Promise.all([\n            fetchFromTruckersHub<{ vtc: VtcStats }>('vtc'),\n            fetchFromTruckersHub<LeaderboardUser[]>('leaderboard/alltime'),\n            fetchFromTruckersHub<LeaderboardUser[]>('leaderboard/monthly'),\n            fetchFromTruckersHub<{jobs: Job[]}>('vtc/jobs'),\n            fetchFromTruckersHub<LiveDriver[]>('live/drivers'),\n        ]);\n\n        const stats = statsData ? statsData.vtc : null;\n        const recentJobs = jobs ? jobs.jobs : [];\n        \n        return { stats, allTime, monthly, jobs: recentJobs, liveDrivers };\n    } catch (error) {\n        console.error(\"Failed to fetch dashboard data:\", error);\n        return { stats: null, allTime: null, monthly: null, jobs: null, liveDrivers: null };\n    }\n}\n\nexport async function getAllVtcJobs(month?: string, year?: string): Promise<Job[]> {\n    const params = new URLSearchParams();\n    if (month) params.append('month', month);\n    if (year) params.append('year', year);\n    const data = await fetchFromTruckersHub<{ jobs: Job[] }>('vtc/jobs', params);\n    return data?.jobs || [];\n}\n\nexport async function getMyJobs(steamId: string): Promise<Job[]> {\n    const data = await fetchFromTruckersHub<{ jobs: Job[] }>(`drivers/${steamId}/jobs`);\n    return data?.jobs || [];\n}\n\nexport async function getJobDetails(jobId: string): Promise<Job | null> {\n    return await fetchFromTruckersHub<Job>(`jobs/${jobId}`);\n}\n\nexport async function getDrivers(): Promise<Driver[]> {\n    const data = await fetchFromTruckersHub<{drivers: Driver[]}>('drivers');\n    return data?.drivers || [];\n}\n\nexport async function getRoutes(): Promise<Route[]> {\n    return await fetchFromTruckersHub<Route[]>('routes') || [];\n}\n\nexport async function getAvailableSkills(): Promise<Skill[]> {\n    const response = await fetchFromTruckersHub<{ skills: Skill[] }>('skills');\n    return response?.skills || [];\n}\n\nexport async function getDriverSkills(steamId: string): Promise<DriverSkill[] | null> {\n    const response = await fetchFromTruckersHub<{ skills: DriverSkill[] }>(`skills/${steamId}`);\n    return response?.skills || null;\n}\n\nexport async function updateDriverSkills(steamId: string, skills: { id: string, level: number }[]): Promise<{ success: boolean; message?: string }> {\n    const payload = skills.reduce((acc, skill) => {\n        acc[skill.id] = skill.level;\n        return acc;\n    }, {} as Record<string, number>);\n\n    const response: any = await fetchFromTruckersHub(`skills/${steamId}`, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n    });\n    \n    if (response && response.status) {\n         return { success: true };\n    }\n\n    return { success: false, message: 'Failed to update skills. The API did not return a success status.' };\n}\n\nexport async function getLiveDrivers(): Promise<LiveDriver[]> {\n    const data = await fetchFromTruckersHub<any>('live/drivers');\n    return (data && data.response) ? data.response : [];\n}\n\nexport async function getLiveDeliveries(): Promise<LiveDelivery[]> {\n    const data = await fetchFromTruckersHub<any>('live/delivery');\n     return (data && data.response) ? data.response : [];\n}\n"],"names":[],"mappings":";;;;;;IAqJsB,iBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/driver-hub/%28hub%29/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { VtcStats, LeaderboardUser, Job, LiveDriver, Driver, Skill, DriverSkill, Route, LiveDelivery } from '@/lib/truckershub-types';\n\ntype ApiResponse<T> = {\n    status?: boolean;\n    response?: T;\n    drivers?: Driver[]; // for drivers endpoint\n    jobs?: Job[]; // for jobs endpoint\n    skills?: Skill[] | DriverSkill[]; // for skills endpoint\n    routes?: Route[];\n};\n\n// This function should be executed on the server where process.env is available.\nasync function fetchFromTruckersHub<T>(endpoint: string, params?: URLSearchParams): Promise<T | null> {\n    const apiKey = process.env.TRUCKERSHUB_API_KEY;\n    if (!apiKey) {\n        console.error(\"TRUCKERSHUB_API_KEY is not set.\");\n        return null;\n    }\n\n    try {\n        const url = new URL(`https://api.truckershub.in/v1/${endpoint}`);\n        if (params) {\n            params.forEach((value, key) => {\n                url.searchParams.append(key, value);\n            });\n        }\n        \n        const res = await fetch(url.toString(), {\n             headers: {\n                'Authorization': apiKey,\n                'Content-Type': 'application/json',\n                'User-Agent': 'TamilPasangaVTC/1.0',\n            },\n            next: { revalidate: 300 } // Revalidate every 5 minutes\n        });\n\n\n        if (!res.ok) {\n            console.error(`Failed to fetch from TruckersHub (${endpoint}):`, res.status, await res.text());\n            return null;\n        }\n\n        const data: ApiResponse<T> = await res.json();\n        \n        if (data && (data.status || data.drivers || data.jobs || data.skills || data.routes || Array.isArray(data))) {\n            // Handle different possible response structures\n            if (data.response) return data.response as T;\n            if (data.drivers) return { drivers: data.drivers } as T;\n            if (data.jobs) return { jobs: data.jobs } as T;\n            if (data.skills) return { skills: data.skills } as T;\n            if (data.routes) return data.routes as T;\n             if (Array.isArray(data)) return data as T;\n            return data as T;\n        }\n\n        if (data && data.status === false) {\n             // Avoid logging empty responses as errors\n             if (Object.keys(data).length > 2) { \n                console.error(`TruckersHub API returned status false for ${endpoint}:`, data);\n             }\n             return null;\n        }\n        \n        return null;\n\n    } catch (error) {\n        console.error(`Error fetching from TruckersHub (${endpoint}):`, error);\n        return null;\n    }\n}\n\n\nexport async function getDashboardData() {\n    try {\n        const [statsData, allTime, monthly, jobs, liveDrivers] = await Promise.all([\n            fetchFromTruckersHub<{ vtc: VtcStats }>('vtc'),\n            fetchFromTruckersHub<LeaderboardUser[]>('leaderboard/alltime'),\n            fetchFromTruckersHub<LeaderboardUser[]>('leaderboard/monthly'),\n            fetchFromTruckersHub<{jobs: Job[]}>('vtc/jobs'),\n            fetchFromTruckersHub<LiveDriver[]>('live/drivers'),\n        ]);\n\n        const stats = statsData ? statsData.vtc : null;\n        const recentJobs = jobs ? jobs.jobs : [];\n        \n        return { stats, allTime, monthly, jobs: recentJobs, liveDrivers };\n    } catch (error) {\n        console.error(\"Failed to fetch dashboard data:\", error);\n        return { stats: null, allTime: null, monthly: null, jobs: null, liveDrivers: null };\n    }\n}\n\nexport async function getAllVtcJobs(month?: string, year?: string): Promise<Job[]> {\n    const params = new URLSearchParams();\n    if (month) params.append('month', month);\n    if (year) params.append('year', year);\n    const data = await fetchFromTruckersHub<{ jobs: Job[] }>('vtc/jobs', params);\n    return data?.jobs || [];\n}\n\nexport async function getMyJobs(steamId: string): Promise<Job[]> {\n    const data = await fetchFromTruckersHub<{ jobs: Job[] }>(`drivers/${steamId}/jobs`);\n    return data?.jobs || [];\n}\n\nexport async function getJobDetails(jobId: string): Promise<Job | null> {\n    return await fetchFromTruckersHub<Job>(`jobs/${jobId}`);\n}\n\nexport async function getDrivers(): Promise<Driver[]> {\n    const data = await fetchFromTruckersHub<{drivers: Driver[]}>('drivers');\n    return data?.drivers || [];\n}\n\nexport async function getRoutes(): Promise<Route[]> {\n    return await fetchFromTruckersHub<Route[]>('routes') || [];\n}\n\nexport async function getAvailableSkills(): Promise<Skill[]> {\n    const response = await fetchFromTruckersHub<{ skills: Skill[] }>('skills');\n    return response?.skills || [];\n}\n\nexport async function getDriverSkills(steamId: string): Promise<DriverSkill[] | null> {\n    const response = await fetchFromTruckersHub<{ skills: DriverSkill[] }>(`skills/${steamId}`);\n    return response?.skills || null;\n}\n\nexport async function updateDriverSkills(steamId: string, skills: { id: string, level: number }[]): Promise<{ success: boolean; message?: string }> {\n    const payload = skills.reduce((acc, skill) => {\n        acc[skill.id] = skill.level;\n        return acc;\n    }, {} as Record<string, number>);\n\n    const response: any = await fetchFromTruckersHub(`skills/${steamId}`, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n    });\n    \n    if (response && response.status) {\n         return { success: true };\n    }\n\n    return { success: false, message: 'Failed to update skills. The API did not return a success status.' };\n}\n\nexport async function getLiveDrivers(): Promise<LiveDriver[]> {\n    const data = await fetchFromTruckersHub<any>('live/drivers');\n    return (data && data.response) ? data.response : [];\n}\n\nexport async function getLiveDeliveries(): Promise<LiveDelivery[]> {\n    const data = await fetchFromTruckersHub<any>('live/delivery');\n     return (data && data.response) ? data.response : [];\n}\n"],"names":[],"mappings":";;;;;;IA0JsB,oBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/driver-hub/live-map/live-map-client.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Truck, User, X, ZoomIn, ZoomOut, Redo, MapPin, Package, Clock, Milestone } from 'lucide-react';\nimport type { LiveDriver, LiveDelivery } from '@/lib/truckershub-types';\nimport Link from 'next/link';\nimport { getLiveDrivers, getLiveDeliveries } from '../(hub)/actions';\n\nconst MAP_IMAGE_URL = 'https://api.truckershub.in/v1/map';\nconst MAP_DIMENSIONS = { width: 8192, height: 8192 };\nconst MAP_BOUNDS = {\n  minX: -40000,\n  maxX: 40000,\n  minY: -40000,\n  maxY: 40000,\n};\n\nconst formatEta = (seconds: number) => {\n    if (seconds <= 0) return 'Arrived';\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor(seconds % 60);\n    return [\n        h > 0 ? `${h}h` : '',\n        m > 0 ? `${m}m` : '',\n        s > 0 ? `${s}s` : '',\n    ].filter(Boolean).join(' ');\n};\n\nexport function LiveMapClient() {\n    const [drivers, setDrivers] = useState<LiveDriver[]>([]);\n    const [deliveries, setDeliveries] = useState<LiveDelivery[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [scale, setScale] = useState(0.2);\n    const [position, setPosition] = useState({ x: 0, y: 0 });\n    const [selectedDriver, setSelectedDriver] = useState<LiveDriver | null>(null);\n\n    const fetchData = async () => {\n        setIsLoading(true);\n        const [driversData, deliveriesData] = await Promise.all([\n            getLiveDrivers(),\n            getLiveDeliveries()\n        ]);\n        setDrivers(driversData);\n        setDeliveries(deliveriesData);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        fetchData();\n        const interval = setInterval(fetchData, 30000); // Refresh every 30 seconds\n        return () => clearInterval(interval);\n    }, []);\n\n    const convertCoords = (driverX: number, driverY: number) => {\n        const mapWidth = MAP_DIMENSIONS.width;\n        const mapHeight = MAP_DIMENSIONS.height;\n        const rangeX = MAP_BOUNDS.maxX - MAP_BOUNDS.minX;\n        const rangeY = MAP_BOUNDS.maxY - MAP_BOUNDS.minY;\n\n        const x = ((driverX - MAP_BOUNDS.minX) / rangeX) * mapWidth;\n        const y = ((driverY - MAP_BOUNDS.minY) / rangeY) * mapHeight;\n\n        return { x, y };\n    };\n    \n    const handleZoomIn = () => setScale(s => Math.min(s * 1.2, 5));\n    const handleZoomOut = () => setScale(s => Math.max(s / 1.2, 0.1));\n    const handleReset = () => {\n        setScale(0.2);\n        setPosition({ x: 0, y: 0 });\n        setSelectedDriver(null);\n    }\n    \n    const handleDriverClick = (driver: LiveDriver) => {\n        setSelectedDriver(driver);\n        const { x, y } = convertCoords(driver.map.x, driver.map.y);\n        \n        setScale(1); \n        setPosition({\n            x: -(x * 1) + window.innerWidth / 2,\n            y: -(y * 1) + window.innerHeight / 2,\n        });\n    };\n\n    const selectedDriverDelivery = selectedDriver ? deliveries.find(d => d.driver_id === selectedDriver.id) : null;\n\n    return (\n        <div className=\"relative w-full h-full overflow-hidden bg-gray-800\">\n            <div className=\"absolute top-4 left-4 z-10 space-x-2\">\n                <Button onClick={handleZoomIn} size=\"icon\"><ZoomIn /></Button>\n                <Button onClick={handleZoomOut} size=\"icon\"><ZoomOut /></Button>\n                <Button onClick={handleReset} size=\"icon\"><Redo /></Button>\n            </div>\n\n            {isLoading && (\n                <div className=\"absolute top-4 right-4 z-10\">\n                    <Loader2 className=\"h-6 w-6 animate-spin text-white\" />\n                </div>\n            )}\n             {!isLoading && (\n                <div className=\"absolute top-4 right-4 z-10 text-white bg-black/50 px-3 py-1.5 rounded-md\">\n                   {drivers.length} Driver(s) Online\n                </div>\n            )}\n\n            <div\n                className=\"absolute\"\n                style={{\n                    transform: `scale(${scale}) translate(${position.x / scale}px, ${position.y / scale}px)`,\n                    transition: 'transform 0.5s ease',\n                }}\n            >\n                <Image src={MAP_IMAGE_URL} alt=\"Live Map\" width={MAP_DIMENSIONS.width} height={MAP_DIMENSIONS.height} unoptimized />\n                \n                {drivers.map(driver => {\n                    const { x, y } = convertCoords(driver.map.x, driver.map.y);\n                    const isSelected = selectedDriver?.id === driver.id;\n\n                    return (\n                        <div\n                            key={driver.id}\n                            className=\"absolute -translate-x-1/2 -translate-y-full cursor-pointer group\"\n                            style={{ left: x, top: y, transition: 'transform 0.5s' }}\n                            onClick={() => handleDriverClick(driver)}\n                        >\n                            <div className=\"relative\">\n                                <Image src={driver.avatar} alt={driver.username} width={40} height={40} className={`rounded-full border-2 transition-all ${isSelected ? 'border-primary scale-125' : 'border-white group-hover:scale-110'}`} />\n                                <div className=\"absolute bottom-0 right-0 -mb-1 -mr-1 bg-gray-800 rounded-full p-0.5\">\n                                    <Truck size={12} className=\"text-white\"/>\n                                </div>\n                            </div>\n                           \n                            <div className={`absolute bottom-full mb-2 w-max max-w-xs transition-opacity duration-300 ${isSelected ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'}`}>\n                                <div className=\"bg-black/70 text-white text-xs rounded-md px-2 py-1 whitespace-nowrap\">\n                                    {driver.username}\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n\n            {selectedDriver && (\n                <Card className=\"absolute bottom-4 left-1/2 -translate-x-1/2 z-20 w-full max-w-md bg-card/90 backdrop-blur-sm\">\n                    <CardHeader className=\"flex flex-row items-center justify-between p-4\">\n                        <div className=\"flex items-center gap-3\">\n                             <Image src={selectedDriver.avatar} alt={selectedDriver.username} width={48} height={48} className=\"rounded-full\" />\n                             <div>\n                                <CardTitle>{selectedDriver.username}</CardTitle>\n                                <p className=\"text-sm text-muted-foreground\">{selectedDriver.role}</p>\n                             </div>\n                        </div>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => setSelectedDriver(null)}><X /></Button>\n                    </CardHeader>\n                    <CardContent className=\"p-4 pt-0 space-y-3\">\n                        <div className=\"text-sm space-y-2\">\n                             <p className=\"flex items-center gap-2\"><MapPin size={16}/> {selectedDriver.location.on_road ? `On ${selectedDriver.location.road_name}` : `In ${selectedDriver.location.city}, ${selectedDriver.location.country}`}</p>\n                             <p className=\"flex items-center gap-2\"><Truck size={16}/> {selectedDriver.truck.make} {selectedDriver.truck.model}</p>\n                             {selectedDriverDelivery ? (\n                                <>\n                                    <p className=\"flex items-center gap-2\"><Package size={16}/> Hauling {selectedDriverDelivery.cargo.name} to {selectedDriverDelivery.destination_city}</p>\n                                    <p className=\"flex items-center gap-2\"><Milestone size={16}/> {selectedDriverDelivery.distance.remaining.toLocaleString()}km remaining</p>\n                                    <p className=\"flex items-center gap-2\"><Clock size={16}/> ETA: {formatEta(selectedDriverDelivery.eta)}</p>\n                                </>\n                             ) : (\n                                 <p className=\"flex items-center gap-2\"><Package size={16}/> Not on a delivery</p>\n                             )}\n                        </div>\n                         <Button variant=\"outline\" size=\"sm\" asChild>\n                            <Link href={`/driver-hub/members`}>View Profile</Link>\n                         </Button>\n                    </CardContent>\n                </Card>\n            )}\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}